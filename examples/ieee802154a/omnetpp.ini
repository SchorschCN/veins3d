[General]
network = phySim
debug-on-errors = false
fname-append-host = false
**.module-eventlog-recording = false
**.vector-recording = true
#**.debug = false
num-rngs = 88
ned-path = ../../base;../../modules;../../examples;

# tkenv-default-run=1

# cmdenv-runs-to-execute=1
cmdenv-express-mode = true

##########################################################
#			Simulation parameters                        #
##########################################################
phySim.**.coreDebug = false
phySim.playgroundSizeX = 500
phySim.playgroundSizeY = 500
phySim.playgroundSizeZ = 500

##########################################################
#			WorldUtility parameters                      #
##########################################################
phySim.world.useTorus = false
phySim.world.use2D = false

##########################################################
#			         channel parameters                  #
##########################################################
#phySim.channelControl.coreDebug = 0
phySim.channelControl.sendDirect = false
phySim.channelControl.pMax = 1000 mW
phySim.channelControl.sat = -100 dBm
phySim.channelControl.alpha = 2.0
phySim.channelControl.carrierFrequency = 4500e+6 Hz

##########################################################
#             Host specific parameters                   #
##########################################################
#phySim.*Node*.utility.coreDebug = 0

################ PhyLayer parameters #####################
phySim.node[*].nic.phy.usePropagationDelay = false
phySim.node[*].nic.phy.thermalNoise = 1.0
        
phySim.node[*].nic.phy.timeRXToTX = 0.00021
phySim.node[*].nic.phy.timeRXToSleep = 0.000031

phySim.node[*].nic.phy.timeTXToRX = 0.00012
phySim.node[*].nic.phy.timeTXToSleep = 0.000032

phySim.node[*].nic.phy.timeSleepToRX = 0.000103
phySim.node[*].nic.phy.timeSleepToTX = 0.000203

phySim.node[*].nic.phy.PSleep = 0.01
phySim.node[*].nic.phy.PTx = 1
phySim.node[*].nic.phy.PSync = 100
phySim.node[*].nic.phy.PRx = 30
phySim.node[*].nic.phy.PSwitch = 10
phySim.node[*].nic.phy.maxTXPower = 1 # useless but required by BasePhyLayer
phySim.node[0].nic.phy.debug = true
***.debug = false
##########################################################
#                   hosts parameters                     #
##########################################################
phySim.node[*].nic.connectionManagerName = "channelControl"

################ PhyLayer parameters #####################
phySim.node[*].nic.phy.sensitivity = 0.1
phySim.node[*].nic.phy.maxTXPower = 100.0

################ MAC parameters ##########################
phySim.node[*].nic.mac.headerLength = 2 byte
phySim.node[*].nic.mac.maxRetries = 1
phySim.node[0].nic.mac.stats = true
phySim.node[*].nic.mac.stats = false
phySim.node[*].nic.mac.trace = false
phySim.node[0].nic.mac.netaddress = 0
phySim.node[1].nic.mac.netaddress = 1
phySim.node[2].nic.mac.netaddress = 2
phySim.node[3].nic.mac.netaddress = 3
phySim.node[4].nic.mac.netaddress = 4
phySim.node[5].nic.mac.netaddress = 5
phySim.node[6].nic.mac.netaddress = 6
phySim.node[7].nic.mac.netaddress = 7
phySim.node[8].nic.mac.netaddress = 8
phySim.node[9].nic.mac.netaddress = 9
phySim.node[10].nic.mac.netaddress = 10

phySim.node[*].nic.mac.debug = false
#phySim.node[*].nic.mac.PulseMaxEnergy = 0.000074989 # -41.3 dBm/MHz
#phySim.node[*].nic.mac.PulseMaxEnergy = 1 # 0 dBm / MHz



################ Application parameters ##################
phySim.node[*].app.trafficParam = 1
phySim.node[0].app.nodeAddr = 0
phySim.node[1].app.nodeAddr = 1
phySim.node[2].app.nodeAddr = 2
phySim.node[3].app.nodeAddr = 3
phySim.node[4].app.nodeAddr = 4
phySim.node[5].app.nodeAddr = 5
phySim.node[6].app.nodeAddr = 6
phySim.node[7].app.nodeAddr = 7
phySim.node[8].app.nodeAddr = 8
phySim.node[9].app.nodeAddr = 9
phySim.node[10].app.nodeAddr = 10

phySim.node[*].app.debug = false
phySim.node[*].app.flood = false

phySim.node[*].app.stats = false
phySim.node[*].app.trace = false
phySim.node[*].app.payloadSize = 8 byte

## Nodes positions
phySim.node[0].mobility.x = 0
phySim.node[0].mobility.y = 0
phySim.node[0].mobility.z = 0
phySim.node[1].mobility.y = 0
phySim.node[1].mobility.z = 0

[Config BERD]
phySim.node[1].app.payloadSize = 8 byte
phySim.node[*].app.dstAddr = 0
**.numHosts = 2
repeat = 10
phySim.node[1].mobility.x = ${distance=10..100 step 10} #${distance=1, 2, 3, 4, 5, 6, 7, 8, 9, 10..100 step 10}
phySim.node[0].app.nbPackets = 0

[Config BERDistance]
description = "Evaluates the bit error rate as a function of distance"
extends = BERD
phySim.node[1].app.nbPackets = ${nbPackets=1000}
phySim.node[*].nic.mac.RSDecoder = true
phySim.node[*].nic.phy.analogueModels = xmldoc("channels/${Channel=ghassemzadeh-los,ghassemzadeh-nlos,cm1,cm2}.xml")
phySim.node[*].nic.phy.decider = xmldoc("receivers/${Receiver=3dB}.xml")


[Config seg]
extends = BERD
description = "Evaluates the segment sync algorithm (UWBIREDSync) without interferers."
phySim.node[1].app.nbPackets = ${nbPackets=100}
phySim.node[*].nic.mac.RSDecoder = true
phySim.node[*].nic.phy.analogueModels = xmldoc("channels/${Channel=ghassemzadeh-nlos}.xml")
phySim.node[*].nic.phy.decider = xmldoc("receivers/${Receiver=3dBseg}.xml")

[Config Sensitivity]
description = "Evaluates the bit error rate as a function of distance and receiver settings."
extends = BERD
phySim.node[1].app.nbPackets = ${nbPackets=1000}
phySim.node[*].nic.mac.RSDecoder = true
phySim.node[*].nic.phy.analogueModels = xmldoc("channels/${Channel=ghassemzadeh-nlos}.xml")
phySim.node[*].nic.phy.decider = xmldoc("receivers/${Receiver=1dB,3dB,10dB}.xml")

[Config RS]
description = "Evaluates the BER with Reed-Solomon error correction."
extends = BERD
repeat = 1
phySim.node[1].app.nbPackets = ${nbPackets=1000}
phySim.node[*].nic.mac.RSDecoder = true
phySim.node[*].nic.phy.analogueModels = xmldoc("channels/${Channel=ghassemzadeh-nlos}.xml")
phySim.node[*].nic.phy.decider = xmldoc("receivers/${Receiver=3dB}.xml")

[Config waveforms]
description = "Generates some waveforms for illustration purposes."
extends = BERD
repeat = 1
phySim.node[1].nic.mac.trace = true
phySim.node[0].nic.mac.trace = true
phySim.node[*].nic.mac.RSDecoder = true
phySim.node[*].nic.phy.analogueModels = xmldoc("channels/${Channel=ghassemzadeh-los,ghassemzadeh-nlos,cm1,cm2,cm5}.xml")
phySim.node[*].nic.phy.decider = xmldoc("receivers/${Receiver=3dB}-trace.xml")
phySim.node[1].app.nbPackets = ${nbPackets=1}
phySim.node[*].app.nbPackets = 0

[Config cmpPCM1D]
description = "Evaluates the BER on a line with an increasing density of jammers, similar to [rousselotuwb07]."
phySim.node[*].mobility.y = 0
phySim.node[*].mobility.z = 0
phySim.node[0].mobility.x = 501
phySim.node[0].app.nbPackets = 0
phySim.node[1].mobility.x = 501+${d=120,60,30}
phySim.node[*].app.payloadSize = 25 byte
phySim.node[*].app.dstAddr = 0
phySim.node[*].app.nbPackets = ${nbPackets=10}
phySim.node[*].nic.mac.RSDecoder = true
phySim.node[*].nic.phy.analogueModels = xmldoc("channels/${Channel=ghassemzadeh-los}.xml")
phySim.node[0].nic.phy.decider = xmldoc("receivers/${Receiver=a1-3dB}.xml")
phySim.node[*].nic.phy.decider = xmldoc("receivers/a999-3dB.xml")
repeat = 10
include cmpPCM1D_positions.ini
 

[Config MAICircle]
description = "Evaluates the impact of multiple access interference on bit error rate with homogeneous interferers"
phySim.node[*].app.flood = true
phySim.node[0].app.nbPackets = 0
phySim.node[*].app.nbPackets = 400
phySim.node[0].app.nbPackets = 0
phySim.node[*].app.payloadSize = 8 byte

[Config MAICircleN]
description = "Evaluates the BER as a function of the number of concurrent transmissions N at equal distance of the receiver"
phySim.node[*].app.nbPackets = 25
repeat = 2
**.numHosts = ${NbNodes=2..6 step 1}
phySim.node[*].nic.phy.analogueModels = xmldoc("channels/${Channel=ghassemzadeh-los}.xml")
phySim.node[*].nic.phy.decider = xmldoc("receivers/${Receiver=3dB}.xml")
phySim.node[0].mobility.x = ${O=100}
phySim.node[0].mobility.y = ${O}
phySim.node[1].mobility.x = ${O} + 5
phySim.node[1].mobility.y =  ${O}
# Everything happens on the same plane
phySim.node[*].mobility.z = 0
# The coordinates of the first jammer also define the iteration variable R
phySim.node[2].mobility.x = ${O} + ${R=5}*uniform(-1,1)
phySim.node[2].mobility.y =  ${O} + sqrt(( this.x-${O} ) * ( this.x-${O} ) - 1 ) * (2*intuniform(0,1)-1)
phySim.node[3].mobility.x = ${O} + ${R}*uniform(-1,1)
phySim.node[3].mobility.y =  ${O} + sqrt( 1-(this.x-${O})*(this.x-${O}) ) * (2*intuniform(0,1)-1)
phySim.node[4].mobility.x = ${O} + ${R}*uniform(-1,1)
phySim.node[4].mobility.y =  ${O} + sqrt( 1-(this.x-${O})*(this.x-${O}) ) * (2*intuniform(0,1)-1)
phySim.node[5].mobility.x = ${O} + ${R}*uniform(-1,1)
phySim.node[5].mobility.y =  ${O} + sqrt( 1-(this.x-${O})*(this.x-${O}) ) * (2*intuniform(0,1)-1)
phySim.node[6].mobility.x = ${O} + ${R}*uniform(-1,1)
phySim.node[6].mobility.y =  ${O} + sqrt( 1-(this.x-${O})*(this.x-${O}) ) * (2*intuniform(0,1)-1)
extends = MAICircle

[Config MAICircleR]
description = "Evaluates the BER between two nodes closely located as a function of the distance R to a large number of interferers"
# Requires threshold based synchronizer
repeat = 2
phySim.node[*].app.nbPackets = 100 # smaller number of packets than usual because we have a larger number of transmitters
phySim.node[*].nic.phy.analogueModels = xmldoc("channels/${Channel=ghassemzadeh-nlos}.xml")
phySim.node[*].nic.phy.decider = xmldoc("receivers/${Receiver=3dB}.xml")
phySim.node[1].app.dstAddr = 0
phySim.node[*].app.dstAddr = 1000
include MAICircleR_positions.ini
extends = MAICircle

[Config MAIUnif]
description = "Evaluates the impact of multiple access interference on bit error rate with heterogeneous interferers"
repeat = 15

phySim.node[*].nic.phy.analogueModels = xmldoc("channels/${Channel=ghassemzadeh-nlos}.xml")
phySim.node[*].nic.phy.decider = xmldoc("receivers/${Receiver=3dB,1dB,10dB}.xml")

**.numHosts = ${NbNodes=3..11 step 1}

phySim.node[0].app.nbPackets = 0
phySim.node[0].app.flood = false

phySim.node[*].app.flood = true
phySim.node[*].app.nbPackets = 250
phySim.node[*].app.payloadSize = 8 byte
phySim.node[*].app.dstAddr = 0

# The receiver is located at the center of a grid

phySim.node[0].mobility.x = 20
phySim.node[0].mobility.y = 20
phySim.node[0].mobility.z = 0

phySim.node[1].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[1].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[1].mobility.z = 0

phySim.node[2].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[2].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[2].mobility.z = 0

phySim.node[3].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[3].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[3].mobility.z = 0

phySim.node[4].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[4].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[4].mobility.z = 0

phySim.node[5].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[5].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[5].mobility.z = 0

phySim.node[6].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[6].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[6].mobility.z = 0

phySim.node[7].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[7].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[7].mobility.z = 0

phySim.node[8].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[8].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[8].mobility.z = 0

phySim.node[9].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[9].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[9].mobility.z = 0

phySim.node[10].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[10].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[10].mobility.z = 0

phySim.node[11].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[11].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[11].mobility.z = 0

phySim.node[12].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[12].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[12].mobility.z = 0

phySim.node[13].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[13].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[13].mobility.z = 0

phySim.node[14].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[14].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[14].mobility.z = 0

phySim.node[15].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[15].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[15].mobility.z = 0

phySim.node[16].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[16].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[16].mobility.z = 0

phySim.node[17].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[17].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[17].mobility.z = 0

phySim.node[18].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[18].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[18].mobility.z = 0

phySim.node[19].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[19].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[19].mobility.z = 0

phySim.node[20].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[20].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[20].mobility.z = 0

phySim.node[21].mobility.x = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[21].mobility.y = 20 + uniform(0, 10) * (intuniform(0,1)*2-1)
phySim.node[21].mobility.z = 0

